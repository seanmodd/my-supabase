"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const GoTrueApi_1 = __importDefault(require("./GoTrueApi"));
const helpers_1 = require("./lib/helpers");
const constants_1 = require("./lib/constants");
const polyfills_1 = require("./lib/polyfills");
polyfills_1.polyfillGlobalThis(); // Make "globalThis" available
const DEFAULT_OPTIONS = {
    url: constants_1.GOTRUE_URL,
    autoRefreshToken: true,
    persistSession: true,
    localStorage: globalThis.localStorage,
    detectSessionInUrl: true,
    headers: constants_1.DEFAULT_HEADERS,
};
class GoTrueClient {
    /**
     * Create a new client for use in the browser.
     * @param options.url The URL of the GoTrue server.
     * @param options.headers Any additional headers to send to the GoTrue server.
     * @param options.detectSessionInUrl Set to "true" if you want to automatically detects OAuth grants in the URL and signs in the user.
     * @param options.autoRefreshToken Set to "true" if you want to automatically refresh the token before expiring.
     * @param options.persistSession Set to "true" if you want to automatically save the user session into local storage.
     * @param options.localStorage
     */
    constructor(options) {
        this.stateChangeEmitters = new Map();
        const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);
        this.currentUser = null;
        this.currentSession = null;
        this.autoRefreshToken = settings.autoRefreshToken;
        this.persistSession = settings.persistSession;
        this.localStorage = new helpers_1.LocalStorage(settings.localStorage);
        this.api = new GoTrueApi_1.default({
            url: settings.url,
            headers: settings.headers,
            cookieOptions: settings.cookieOptions,
        });
        this._recoverSession();
        // Handle the OAuth redirect
        try {
            if (settings.detectSessionInUrl && helpers_1.isBrowser() && !!helpers_1.getParameterByName('access_token')) {
                this.getSessionFromUrl({ storeSession: true });
            }
        }
        catch (error) {
            console.log('Error getting session from URL.');
        }
    }
    /**
     * Creates a new user.
     * @type UserCredentials
     * @param email The user's email address.
     * @param password The user's password.
     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.
     */
    signUp({ email, password }, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this._removeSession();
                const { data, error } = yield this.api.signUpWithEmail(email, password, {
                    redirectTo: options.redirectTo,
                });
                if (error) {
                    throw error;
                }
                if (!data) {
                    throw 'An error occurred on sign up.';
                }
                let session = null;
                let user = null;
                if (data.access_token) {
                    session = data;
                    user = session.user;
                    this._saveSession(session);
                    this._notifyAllSubscribers('SIGNED_IN');
                }
                if (data.id) {
                    user = data;
                }
                return { data, user, session, error: null };
            }
            catch (error) {
                return { data: null, user: null, session: null, error };
            }
        });
    }
    /**
     * Log in an existing user, or login via a third-party provider.
     * @type UserCredentials
     * @param email The user's email address.
     * @param password The user's password.
     * @param provider One of the providers supported by GoTrue.
     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.
     * @param scopes A space-separated list of scopes granted to the OAuth application.
     */
    signIn({ email, password, provider }, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this._removeSession();
                if (email && !password) {
                    const { error } = yield this.api.sendMagicLinkEmail(email, {
                        redirectTo: options.redirectTo,
                    });
                    return { data: null, user: null, session: null, error };
                }
                if (email && password) {
                    return this._handleEmailSignIn(email, password, {
                        redirectTo: options.redirectTo,
                    });
                }
                if (provider) {
                    return this._handleProviderSignIn(provider, {
                        redirectTo: options.redirectTo,
                        scopes: options.scopes,
                    });
                }
                throw new Error(`You must provide either an email or a third-party provider.`);
            }
            catch (error) {
                return { data: null, user: null, session: null, error };
            }
        });
    }
    /**
     * Inside a browser context, `user()` will return the user data, if there is a logged in user.
     *
     * For server-side management, you can get a user through `auth.api.getUserByCookie()`
     */
    user() {
        return this.currentUser;
    }
    /**
     * Returns the session data, if there is an active session.
     */
    session() {
        return this.currentSession;
    }
    /**
     * Force refreshes the session including the user data in case it was updated in a different session.
     */
    refreshSession() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!((_a = this.currentSession) === null || _a === void 0 ? void 0 : _a.access_token))
                    throw new Error('Not logged in.');
                yield this._callRefreshToken();
                const { data, error } = yield this.api.getUser(this.currentSession.access_token);
                if (error)
                    throw error;
                this.currentUser = data;
                return { data: this.currentSession, user: this.currentUser, error: null };
            }
            catch (error) {
                return { data: null, user: null, error };
            }
        });
    }
    /**
     * Updates user data, if there is a logged in user.
     */
    update(attributes) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!((_a = this.currentSession) === null || _a === void 0 ? void 0 : _a.access_token))
                    throw new Error('Not logged in.');
                const { data, error } = yield this.api.updateUser(this.currentSession.access_token, attributes);
                if (error)
                    throw error;
                this.currentUser = data;
                this._notifyAllSubscribers('USER_UPDATED');
                return { data, user: this.currentUser, error: null };
            }
            catch (error) {
                return { data: null, user: null, error };
            }
        });
    }
    /**
     * Gets the session data from a URL string
     * @param options.storeSession Optionally store the session in the browser
     */
    getSessionFromUrl(options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!helpers_1.isBrowser())
                    throw new Error('No browser detected.');
                const error_description = helpers_1.getParameterByName('error_description');
                if (error_description)
                    throw new Error(error_description);
                const provider_token = helpers_1.getParameterByName('provider_token');
                const access_token = helpers_1.getParameterByName('access_token');
                if (!access_token)
                    throw new Error('No access_token detected.');
                const expires_in = helpers_1.getParameterByName('expires_in');
                if (!expires_in)
                    throw new Error('No expires_in detected.');
                const refresh_token = helpers_1.getParameterByName('refresh_token');
                if (!refresh_token)
                    throw new Error('No refresh_token detected.');
                const token_type = helpers_1.getParameterByName('token_type');
                if (!token_type)
                    throw new Error('No token_type detected.');
                const { user, error } = yield this.api.getUser(access_token);
                if (error)
                    throw error;
                const session = {
                    provider_token,
                    access_token,
                    expires_in: parseInt(expires_in),
                    refresh_token,
                    token_type,
                    user: user,
                };
                if (options === null || options === void 0 ? void 0 : options.storeSession) {
                    this._saveSession(session);
                    this._notifyAllSubscribers('SIGNED_IN');
                    if (helpers_1.getParameterByName('type') === 'recovery') {
                        this._notifyAllSubscribers('PASSWORD_RECOVERY');
                    }
                }
                // Remove tokens from URL
                window.location.hash = '';
                return { data: session, error: null };
            }
            catch (error) {
                return { data: null, error };
            }
        });
    }
    /**
     * Inside a browser context, `signOut()` will remove extract the logged in user from the browser session
     * and log them out - removing all items from localstorage and then trigger a "SIGNED_OUT" event.
     *
     * For server-side management, you can disable sessions by passing a JWT through to `auth.api.signOut(JWT: string)`
     */
    signOut() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.currentSession) {
                const { error } = yield this.api.signOut(this.currentSession.access_token);
                if (error)
                    return { error };
            }
            this._removeSession();
            this._notifyAllSubscribers('SIGNED_OUT');
            return { error: null };
        });
    }
    /**
     * Receive a notification every time an auth event happens.
     * @returns {Subscription} A subscription object which can be used to unsubscribe itself.
     */
    onAuthStateChange(callback) {
        try {
            const id = helpers_1.uuid();
            const self = this;
            const subscription = {
                id,
                callback,
                unsubscribe: () => {
                    self.stateChangeEmitters.delete(id);
                },
            };
            this.stateChangeEmitters.set(id, subscription);
            return { data: subscription, error: null };
        }
        catch (error) {
            return { data: null, error };
        }
    }
    _handleEmailSignIn(email, password, options = {}) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const { data, error } = yield this.api.signInWithEmail(email, password, {
                    redirectTo: options.redirectTo,
                });
                if (error || !data)
                    return { data: null, user: null, session: null, error };
                if ((_a = data === null || data === void 0 ? void 0 : data.user) === null || _a === void 0 ? void 0 : _a.confirmed_at) {
                    this._saveSession(data);
                    this._notifyAllSubscribers('SIGNED_IN');
                }
                return { data, user: data.user, session: data, error: null };
            }
            catch (error) {
                return { data: null, user: null, session: null, error };
            }
        });
    }
    _handleProviderSignIn(provider, options = {}) {
        const url = this.api.getUrlForProvider(provider, {
            redirectTo: options.redirectTo,
            scopes: options.scopes,
        });
        try {
            // try to open on the browser
            if (helpers_1.isBrowser()) {
                window.location.href = url;
            }
            return { provider, url, data: null, session: null, user: null, error: null };
        }
        catch (error) {
            // fallback to returning the URL
            if (!!url)
                return { provider, url, data: null, session: null, user: null, error: null };
            return { data: null, user: null, session: null, error };
        }
    }
    _saveSession(session) {
        this.currentSession = session;
        this.currentUser = session.user;
        const tokenExpirySeconds = session['expires_in'];
        if (this.autoRefreshToken && tokenExpirySeconds) {
            setTimeout(this._callRefreshToken, (tokenExpirySeconds - 60) * 1000);
        }
        if (this.persistSession) {
            this._persistSession(this.currentSession, tokenExpirySeconds);
        }
    }
    _persistSession(currentSession, secondsToExpiry) {
        const timeNow = Math.round(Date.now() / 1000);
        const expiresAt = timeNow + secondsToExpiry;
        const data = { currentSession, expiresAt };
        helpers_1.isBrowser() && this.localStorage.setItem(constants_1.STORAGE_KEY, JSON.stringify(data));
    }
    _removeSession() {
        return __awaiter(this, void 0, void 0, function* () {
            this.currentSession = null;
            this.currentUser = null;
            helpers_1.isBrowser() && (yield this.localStorage.removeItem(constants_1.STORAGE_KEY));
        });
    }
    _recoverSession() {
        return __awaiter(this, void 0, void 0, function* () {
            // Note: this method is async to accommodate for AsyncStorage e.g. in React native.
            const json = helpers_1.isBrowser() && (yield this.localStorage.getItem(constants_1.STORAGE_KEY));
            if (!json) {
                return null;
            }
            try {
                const data = JSON.parse(json);
                const { currentSession, expiresAt } = data;
                const timeNow = Math.round(Date.now() / 1000);
                if (expiresAt < timeNow) {
                    if (this.autoRefreshToken && currentSession.refresh_token) {
                        const { error } = yield this._callRefreshToken(currentSession.refresh_token);
                        if (error) {
                            console.log(error.message);
                            yield this._removeSession();
                        }
                    }
                    else {
                        this._removeSession();
                    }
                }
                else if (!currentSession || !currentSession.user) {
                    console.log('Current session is missing data.');
                    this._removeSession();
                }
                else {
                    this.currentSession = currentSession;
                    this.currentUser = currentSession.user;
                    this._notifyAllSubscribers('SIGNED_IN');
                    // schedule a refresh 60 seconds before token due to expire
                    setTimeout(this._callRefreshToken, (expiresAt - timeNow - 60) * 1000);
                }
            }
            catch (err) {
                console.error(err);
                return null;
            }
        });
    }
    _callRefreshToken(refresh_token) {
        var _a;
        if (refresh_token === void 0) { refresh_token = (_a = this.currentSession) === null || _a === void 0 ? void 0 : _a.refresh_token; }
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!refresh_token) {
                    throw new Error('No current session.');
                }
                const { data, error } = yield this.api.refreshAccessToken(refresh_token);
                if (data === null || data === void 0 ? void 0 : data.access_token) {
                    this.currentSession = data;
                    this.currentUser = this.currentSession.user;
                    this._notifyAllSubscribers('SIGNED_IN');
                    const tokenExpirySeconds = data.expires_in;
                    if (this.autoRefreshToken && tokenExpirySeconds) {
                        setTimeout(this._callRefreshToken, (tokenExpirySeconds - 60) * 1000);
                    }
                    if (this.persistSession && this.currentUser) {
                        this._persistSession(this.currentSession, tokenExpirySeconds);
                    }
                }
                else {
                    throw error;
                }
                return { data, error: null };
            }
            catch (error) {
                return { data: null, error };
            }
        });
    }
    _notifyAllSubscribers(event) {
        this.stateChangeEmitters.forEach((x) => x.callback(event, this.currentSession));
    }
}
exports.default = GoTrueClient;
//# sourceMappingURL=GoTrueClient.js.map